# -*- coding: utf-8 -*-
"""vanilla_model_v3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jw6Z5FDc9UpnSRY1Gwuv5KnH_oD9gsL3

Requirements
"""

from __future__ import unicode_literals, print_function, division
import unicodedata
import re
import random
import itertools

import torch
import torch.nn as nn
from torch import optim
import torch.nn.functional as F

import numpy as np
from torch.utils.data import TensorDataset, DataLoader, RandomSampler

from huggingface_hub import login, Repository, HfApi, HfFolder
from datasets import load_dataset

import os
import pandas as pd

import time
import math

import matplotlib.pyplot as plt
plt.switch_backend('agg')
import matplotlib.ticker as ticker

from nltk.translate.bleu_score import sentence_bleu
from nltk.translate.bleu_score import SmoothingFunction

SOS_token = 0
EOS_token = 1
MAX_LENGTH = 50
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

def getDataset():
    url = 'https://docs.google.com/spreadsheets/d/e/2PACX-{}/pub?output=csv'

    data_dir = os.path.join('data', 'translate')
    data_files = {
        'summer.csv': '1vQp-kOdhUa6muKtSaihYJI-OSPv69k7oFUKoUb8HVTJxSJUUkrOvQJ6HnA25OmK6Uo1-TwZBiSICl-A',
        'fall.csv': '1vSLzNHx5kiKKh0pfVBzW4DqcPvl1A5J835NOCZeLhPOA0Dt2JlVNc8Zkd08Cs7KLj00whTiqS8e1GNz',
        'bible.csv': '1vTCwQ20sZhRxWgdWvwp3ay0wqcQigW1mNiOOKElj_OZjpTnAplPNZ3jWJukBXltjA',
    }

    if not os.path.exists(data_dir):
        os.makedirs(data_dir)

    for file, file_id in data_files.items():
        df = pd.read_csv(url.format(file_id))[['ENGLISH', 'TWI']]
        data_file = os.path.join(data_dir, file)
        df.dropna().to_csv(data_file, index=False)

    return load_dataset('IssakaAI/en-tw')

class Lang:
    def __init__(self, name):
        self.name = name
        self.word2index = {"<UNK>": 2, "SOS": 0, "EOS": 1}  # Initialize <UNK>, SOS, and EOS
        self.word2count = {"<UNK>": 0, "SOS": 0, "EOS": 0}  # Initialize counts for <UNK>, SOS, and EOS
        self.index2word = {0: "SOS", 1: "EOS", 2: "<UNK>"}  # Initialize indices for SOS, EOS, and <UNK>
        self.n_words = 3  # Start counting from 3 to account for <UNK>, SOS, and EOS

    def addSentence(self, sentence):
        for word in sentence.split(' '):
            self.addWord(word)

    def addWord(self, word):
        if word not in self.word2index:
            self.word2index[word] = self.n_words
            self.word2count[word] = 1
            self.index2word[self.n_words] = word
            self.n_words += 1
        else:
            self.word2count[word] += 1

# Turn a Unicode string to plain ASCII, thanks to
# https://stackoverflow.com/a/518232/2809427
def unicodeToAscii(s):
    return ''.join(
        c for c in unicodedata.normalize('NFD', s)
        if unicodedata.category(c) != 'Mn'
    )

# Lowercase, trim, and remove non-letter characters
def normalizeString(s):
    s = unicodeToAscii(s.lower().strip())
    s = re.sub(r"([.!?])", r" \1", s)
    s = re.sub(r"[^a-zA-Z!?ɛƐɔƆ]+", r" ", s)
    return s.strip()

# Lowercase, trim, and remove non-letter characters
def normalizeEnglish(s):
    # English-specific normalization here
    s = unicodeToAscii(s.lower().strip())
    s = re.sub(r"([.!?])", r" \1", s)
    s = re.sub(r"[^a-zA-Z!?]+", r" ", s)
    return s.strip()

def normalizeTwi(s):
    # Lowercase the text
    s = s.lower()

    # Remove diacritics and accents
    s = unicodeToAscii(s)

    # Remove non-alphanumeric characters except for basic punctuation
    s = re.sub(r"[^a-z0-9!,.?]", " ", s)

    # Collapse multiple spaces into a single space
    s = re.sub(r" +", " ", s)

    return s.strip()

def readLangs(dataset, lang1, lang2, reverse=False):
    print("Reading lines...")

    # Extract the data from the dataset
    data = dataset["train"]

    # Split every item into pairs and normalize
    pairs = [[normalizeString(item[lang1]), normalizeString(item[lang2])] for item in data]

    # Reverse pairs, make Lang instances
    if reverse:
        pairs = [list(reversed(p)) for p in pairs]
        input_lang = Lang(lang2)
        output_lang = Lang(lang1)
    else:
        input_lang = Lang(lang1)
        output_lang = Lang(lang2)

    return input_lang, output_lang, pairs



def filterPair(p):
    return len(p[0].split(' ')) < MAX_LENGTH and \
        len(p[1].split(' ')) < MAX_LENGTH


def filterPairs(pairs):
    return [pair for pair in pairs if filterPair(pair)]

def prepareData(dataset, lang1, lang2, reverse=False):
    input_lang, output_lang, pairs = readLangs(dataset, lang1, lang2, reverse)
    input_lang.addWord("<UNK>")
    print("Read %s sentence pairs" % len(pairs))
    pairs = filterPairs(pairs)
    print("Trimmed to %s sentence pairs" % len(pairs))
    print("Counting words...")
    for pair in pairs:
        input_lang.addSentence(pair[0])
        output_lang.addSentence(pair[1])
    print("Counted words:")
    print(input_lang.name, input_lang.n_words)
    print(output_lang.name, output_lang.n_words)
    return input_lang, output_lang, pairs

class EncoderRNN(nn.Module):
    def __init__(self, input_size, hidden_size, dropout_p=0.1):
        super(EncoderRNN, self).__init__()
        self.hidden_size = hidden_size

        self.embedding = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size, batch_first=True)
        self.dropout = nn.Dropout(dropout_p)

    def forward(self, input):
        embedded = self.dropout(self.embedding(input))
        output, hidden = self.gru(embedded)
        return output, hidden

class DecoderRNN(nn.Module):
    def __init__(self, hidden_size, output_size):
        super(DecoderRNN, self).__init__()
        self.embedding = nn.Embedding(output_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size, batch_first=True)
        self.out = nn.Linear(hidden_size, output_size)

    def forward(self, encoder_outputs, encoder_hidden, target_tensor=None):
        batch_size = encoder_outputs.size(0)
        decoder_input = torch.empty(batch_size, 1, dtype=torch.long, device=device).fill_(SOS_token)
        decoder_hidden = encoder_hidden
        decoder_outputs = []

        for i in range(MAX_LENGTH):
            decoder_output, decoder_hidden  = self.forward_step(decoder_input, decoder_hidden)
            decoder_outputs.append(decoder_output)

            if target_tensor is not None:
                # Teacher forcing: Feed the target as the next input
                decoder_input = target_tensor[:, i].unsqueeze(1) # Teacher forcing
            else:
                # Without teacher forcing: use its own predictions as the next input
                _, topi = decoder_output.topk(1)
                decoder_input = topi.squeeze(-1).detach()  # detach from history as input

        decoder_outputs = torch.cat(decoder_outputs, dim=1)
        decoder_outputs = F.log_softmax(decoder_outputs, dim=-1)
        return decoder_outputs, decoder_hidden, None # We return None for consistency in the training loop

    def forward_step(self, input, hidden):
        output = self.embedding(input)
        output = F.relu(output)
        output, hidden = self.gru(output, hidden)
        output = self.out(output)
        return output, hidden

class BahdanauAttention(nn.Module):
    def __init__(self, hidden_size):
        super(BahdanauAttention, self).__init__()
        self.Wa = nn.Linear(hidden_size, hidden_size)
        self.Ua = nn.Linear(hidden_size, hidden_size)
        self.Va = nn.Linear(hidden_size, 1)

    def forward(self, query, keys):
        scores = self.Va(torch.tanh(self.Wa(query) + self.Ua(keys)))
        scores = scores.squeeze(2).unsqueeze(1)

        weights = F.softmax(scores, dim=-1)
        context = torch.bmm(weights, keys)

        return context, weights

class AttnDecoderRNN(nn.Module):
    def __init__(self, hidden_size, output_size, dropout_p=0.1):
        super(AttnDecoderRNN, self).__init__()
        self.embedding = nn.Embedding(output_size, hidden_size)
        self.attention = BahdanauAttention(hidden_size)
        self.gru = nn.GRU(2 * hidden_size, hidden_size, batch_first=True)
        self.out = nn.Linear(hidden_size, output_size)
        self.dropout = nn.Dropout(dropout_p)

    def forward(self, encoder_outputs, encoder_hidden, target_tensor=None):
        batch_size = encoder_outputs.size(0)
        decoder_input = torch.empty(batch_size, 1, dtype=torch.long, device=device).fill_(SOS_token)
        decoder_hidden = encoder_hidden
        decoder_outputs = []
        attentions = []

        for i in range(MAX_LENGTH):
            decoder_output, decoder_hidden, attn_weights = self.forward_step(
                decoder_input, decoder_hidden, encoder_outputs
            )
            decoder_outputs.append(decoder_output)
            attentions.append(attn_weights)

            if target_tensor is not None:
                # Teacher forcing: Feed the target as the next input
                decoder_input = target_tensor[:, i].unsqueeze(1) # Teacher forcing
            else:
                # Without teacher forcing: use its own predictions as the next input
                _, topi = decoder_output.topk(1)
                decoder_input = topi.squeeze(-1).detach()  # detach from history as input

        decoder_outputs = torch.cat(decoder_outputs, dim=1)
        decoder_outputs = F.log_softmax(decoder_outputs, dim=-1)
        attentions = torch.cat(attentions, dim=1)

        return decoder_outputs, decoder_hidden, attentions


    def forward_step(self, input, hidden, encoder_outputs):
        embedded =  self.dropout(self.embedding(input))

        query = hidden.permute(1, 0, 2)
        context, attn_weights = self.attention(query, encoder_outputs)
        input_gru = torch.cat((embedded, context), dim=2)

        output, hidden = self.gru(input_gru, hidden)
        output = self.out(output)

        return output, hidden, attn_weights

def indexesFromSentence(lang, sentence):
    return [lang.word2index.get(word, lang.word2index["<UNK>"]) for word in sentence.split(' ')]

def tensorFromSentence(lang, sentence):
    indexes = indexesFromSentence(lang, sentence)
    indexes.append(EOS_token)
    return torch.tensor(indexes, dtype=torch.long, device=device).view(1, -1)

def tensorsFromPair(pair):
    input_tensor = tensorFromSentence(input_lang, pair[0])
    target_tensor = tensorFromSentence(output_lang, pair[1])
    return (input_tensor, target_tensor)

def get_dataloader(batch_size, dataset):
    input_lang, output_lang, pairs = prepareData(dataset, 'ENGLISH', 'TWI')

    n = len(pairs)
    input_ids = np.zeros((n, MAX_LENGTH), dtype=np.int32)
    target_ids = np.zeros((n, MAX_LENGTH), dtype=np.int32)

    for idx, (inp, tgt) in enumerate(pairs):
        inp_ids = indexesFromSentence(input_lang, inp)
        tgt_ids = indexesFromSentence(output_lang, tgt)
        inp_ids.append(EOS_token)
        tgt_ids.append(EOS_token)
        input_ids[idx, :len(inp_ids)] = inp_ids
        target_ids[idx, :len(tgt_ids)] = tgt_ids

    train_data = TensorDataset(torch.LongTensor(input_ids).to(device),
                               torch.LongTensor(target_ids).to(device))

    train_sampler = RandomSampler(train_data)
    train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)
    return input_lang, output_lang, train_dataloader, pairs

def train_epoch(dataloader, encoder, decoder, encoder_optimizer,
          decoder_optimizer, criterion):

    total_loss = 0
    for data in dataloader:
        input_tensor, target_tensor = data

        encoder_optimizer.zero_grad()
        decoder_optimizer.zero_grad()

        encoder_outputs, encoder_hidden = encoder(input_tensor)
        decoder_outputs, _, _ = decoder(encoder_outputs, encoder_hidden, target_tensor)

        loss = criterion(
            decoder_outputs.view(-1, decoder_outputs.size(-1)),
            target_tensor.view(-1)
        )
        loss.backward()

        encoder_optimizer.step()
        decoder_optimizer.step()

        total_loss += loss.item()

    return total_loss / len(dataloader)


def asMinutes(s):
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)

def timeSince(since, percent):
    now = time.time()
    s = now - since
    es = s / (percent)
    rs = es - s
    return '%s (- %s)' % (asMinutes(s), asMinutes(rs))


def showPlot(points):
    plt.figure()
    fig, ax = plt.subplots()
    # this locator puts ticks at regular intervals
    loc = ticker.MultipleLocator(base=0.2)
    ax.yaxis.set_major_locator(loc)
    plt.plot(points)

def train(train_dataloader, encoder, decoder, n_epochs, learning_rate=0.001,
               print_every=100):
    start = time.time()
    print_loss_total = 0  # Reset every print_every

    encoder_optimizer = optim.Adam(encoder.parameters(), lr=learning_rate)
    decoder_optimizer = optim.Adam(decoder.parameters(), lr=learning_rate)
    criterion = nn.NLLLoss()

    for epoch in range(1, n_epochs + 1):
        loss = train_epoch(train_dataloader, encoder, decoder, encoder_optimizer, decoder_optimizer, criterion)
        print_loss_total += loss

        if epoch % print_every == 0:
            print_loss_avg = print_loss_total / print_every
            print_loss_total = 0
            print('%s (%d %d%%) %.4f' % (timeSince(start, epoch / n_epochs),
                                        epoch, epoch / n_epochs * 100, print_loss_avg))

def evaluate(encoder, decoder, sentence, input_lang, output_lang):
    with torch.no_grad():
        input_tensor = tensorFromSentence(input_lang, sentence)

        encoder_outputs, encoder_hidden = encoder(input_tensor)
        decoder_outputs, decoder_hidden, decoder_attn = decoder(encoder_outputs, encoder_hidden)

        _, topi = decoder_outputs.topk(1)
        decoded_ids = topi.squeeze()

        decoded_words = []
        for idx in decoded_ids:
            if idx.item() == EOS_token:
                decoded_words.append('<EOS>')
                break
            decoded_words.append(output_lang.index2word[idx.item()])
    return decoded_words, decoder_attn

def evaluateRandomly(encoder, decoder, input_lang, output_lang, dataset, n=10):
    test_pairs = [(item['ENGLISH'], item['TWI']) for item in dataset["test"]]

    for i in range(n):
        pair = random.choice(test_pairs)
        print('>', pair[0])
        print('=', pair[1])
        output_words, _ = evaluate(encoder, decoder, pair[0], input_lang, output_lang)
        output_sentence = ' '.join(output_words)
        print('<', output_sentence)
        print('')

def calculate_bleu_score(encoder, decoder, input_lang, output_lang, dataset):
    scores = []

    # Inside the calculate_bleu_score function
    chencherry = SmoothingFunction()

    # Extracting test pairs from the dataset
    test_pairs = [(item['ENGLISH'], item['TWI']) for item in dataset["test"]]

    for eng, twi in test_pairs:
        reference = twi.split()
        output_words, _ = evaluate(encoder, decoder, eng, input_lang, output_lang)
        output_sentence = ' '.join(output_words)

        # BLEU score calculation
        candidate = output_sentence.split()
        # score = sentence_bleu([reference], candidate)
        score = sentence_bleu([reference], candidate, smoothing_function=chencherry.method1)
        scores.append(score)

    return sum(scores) / len(scores)

def main():
    token = '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'

    # Authenticate with Hugging Face
    login(token=token)
    api = HfApi()
    token = HfFolder.get_token()  # ensure you have logged in with transformers-cli
    username = api.whoami(token)["name"]

    dataset = getDataset()

    # hidden_sizes = [128, 256, 512]
    # batch_sizes = [32, 64, 128]
    # dropout_rates = [0.1, 0.3, 0.5]

    hidden_sizes = [128]
    batch_sizes = [128]
    dropout_rates = [0.1, 0.3]

    for hidden_size, batch_size, dropout_rate in itertools.product(hidden_sizes, batch_sizes, dropout_rates):
        input_lang, output_lang, train_dataloader, pairs = get_dataloader(batch_size, dataset)

        encoder = EncoderRNN(input_lang.n_words, hidden_size, dropout_rate).to(device)
        decoder = AttnDecoderRNN(hidden_size, output_lang.n_words, dropout_rate).to(device)

        train(train_dataloader, encoder, decoder, 1, print_every=5)

        encoder.eval()
        decoder.eval()
        evaluateRandomly(encoder, decoder, input_lang, output_lang, dataset, 10)

        bleu_score = calculate_bleu_score(encoder, decoder, input_lang, output_lang, dataset)
        print("BLEU score: ", bleu_score)

        # Define the model repository name
        model_repo_name = f"pytorch_vanilla_model_{hidden_size}_{batch_size}_{dropout_rate}"
        model_save_path = f"./{model_repo_name}.pth"

        # Create a repository on Hugging Face Hub (if it does not exist)
        # try:
        #     api.create_repo(token, model_repo_name, private=False)  # Set private=True for a private repository
        #     print(f"Repository {model_repo_name} created on Hugging Face Hub")
        # except Exception as e:
        #     print(f"Repository creation error: {e}")

        os.makedirs(model_save_path, exist_ok=True)

        # # Create a local repository
        # if not os.path.exists(model_save_path):
        #     os.makedirs(model_save_path)
        # # os.makedirs(model_save_path, exist_ok=True)
        # repo = Repository(local_dir=model_save_path, clone_from=f"{username}/{model_repo_name}")

        # Save the model
        torch.save({
            'encoder_state_dict': encoder.state_dict(),
            'decoder_state_dict': decoder.state_dict(),
            'input_lang': input_lang,
            'output_lang': output_lang,
            'hidden_size': hidden_size
        }, model_save_path)

        # # Push to Hugging Face Hub
        # repo.push_to_hub(commit_message=f"Adding hiddensize={hidden_size}, batchsize={batch_size}, dropout={dropout_rate}")

        # Git commands to push the model
        # os.system(f"cd {model_save_path} && git init")
        # os.system(f"cd {model_repo_name} && git remote add origin https://huggingface.co/{username}/{model_repo_name}")
        # os.system(f"cd {model_repo_name} && git lfs track '*.pth'")
        # os.system(f"cd {model_repo_name} && git add .")
        # os.system(f"cd {model_repo_name} && git commit -m 'Initial model commit'")
        # os.system(f"cd {model_repo_name} && git push --set-upstream origin main")

        # print(f"Model uploaded to Hugging Face Hub: {model_repo_name}")

if __name__ == '__main__':
    main()